if(!bluewave) var bluewave={};
if(!bluewave.editor) bluewave.editor={};

//******************************************************************************
//**  FilterEditor
//******************************************************************************
/**
 *   Panel used to create data filters. Supports Javascript and SQL programming
 *   languages.
 *
 ******************************************************************************/

bluewave.editor.FilterEditor = function(parent, config) {

    var me = this;
    var defaultConfig = {

        supportedLanguages: ["sql", "javascript"],

        style: {


            border: "1px solid #b5b5b5",
            editor: {
                height: "240px",
                /*
                background: "inherit",
                border: "0px none",

                margin: 0,
                padding: "5px 10px",

                fontFamily: '"Consolas", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace',
                color: "#97989c"
                */
            },
            bottomPanel: {
                backgroundColor: "#e4e4e4",
                borderTop: "1px solid #b5b5b5"
            }

        },

        filter: {

            mode: "sql", //"javascript", "cypher"
            code: ""
        }

    };



    var editor;
    var combobox;
    var waitmask;

    var gridContainer, grid; //grid elements

    var inputData = [];
    var data = [];

    var button = {}; //toolbar buttons

    var getRecords; //script generated by the code editor when in javascript mode


  //**************************************************************************
  //** Constructor
  //**************************************************************************
    var init = function(){

        if (!config) config = {};
        config = merge(config, defaultConfig);

      //Create table with 3 rows
        var table = createTable(parent);
        var td;


      //Add toolbar to the first row
        createToolbar(table.addRow().addColumn());


      //Add code editor to the second row
        var td = table.addRow().addColumn();
        setStyle(td, config.style.editor);
        td.style.borderBottom = config.style.border; //???
        createEditor(td);
        var target = td;


      //Create bottom panel
        var td = table.addRow().addColumn();
        setStyle(td, config.style.bottomPanel);
        td.style.height = "100%";
        td.style.verticalAlign = "top";


      //Add vertical resizer
        addVerticalResizer(td, target);


      //Add grid container
        createGridContainer(td);


      //Create waitmask
        createWaitMask(td);


        me.el = table;
    };


  //**************************************************************************
  //** getConfig
  //**************************************************************************
    this.getConfig = function(){
        return config.filter;
    };


  //**************************************************************************
  //** getData
  //**************************************************************************
  /** Returns filtered data via a given callback. The data is a JSON array
   *  representing CSV data.
   */
    this.getData = function(callback){
        if (callback) callback.apply(me, [data]);
    };


  //**************************************************************************
  //** clear
  //**************************************************************************
    this.clear = function(){
        inputData = [];
        data = [];
        grid = null;
        gridContainer.innerHTML = "";
    };


  //**************************************************************************
  //** update
  //**************************************************************************
    this.update = function(node, callback){
        me.clear();


      //Update config
        config.filter = merge(node.config, defaultConfig.filter);



      //Get input data
        for (var key in node.inputs) {
            if (node.inputs.hasOwnProperty(key)){
                var inputNode = node.inputs[key];
                var data = parseData(inputNode.data, inputNode.config);
                if (data.length>0) inputData.push({
                    raw: inputNode.data,
                    data: data,
                    config: inputNode.config
                });
            }
        }


      //Update
        combobox.setValue(config.filter.mode, true);
        editor.setMode(config.filter.mode);
        var code = config.filter.code;
        var defaultCode = getDefaultCode(combobox.getValue());
        if (code){
            code = code+"";
            if (code.trim().length==0){
                code = defaultCode;
            }
        }
        else{
            code = defaultCode;
        }
        editor.setValue(code);
        runScript(callback);
    };


  //**************************************************************************
  //** createToolbar
  //**************************************************************************
    var createToolbar = function(parent){

        var div = document.createElement("div");
        div.className = "panel-toolbar";
        parent.appendChild(div);


        var table = createTable(div);
        table.style.width = "";
        var row = table.addRow();
        var td;


      //Create buttons
        td = row.addColumn();
        button.run = createButton(td, {
            style: config.style.toolbarButton,
            icon: "fas fa-play",
            label: "Run"
        });
        button.run.onClick = runScript;


      //Add spacer
        td = row.addColumn();
        td.style.verticalAlign = "bottom";
        createSpacer(td);


      //Create language pulldown
        td = row.addColumn();
        td.innerText = "Mode:";
        td = row.addColumn();
        td.style.width = "150px";
        td.style.paddingLeft = "5px";
        combobox = new javaxt.dhtml.ComboBox(td, {
            style: config.style.combobox,
            readOnly: true
        });

        config.supportedLanguages.forEach((lang)=>{
            var label;
            if (lang==="sql") label = lang.toUpperCase();
            else label = lang.substring(0,1).toUpperCase() + lang.substring(1);
            combobox.add(label, lang);
        });



        combobox.onChange = function(label, value, prevLabel, prevValue){

            var code = editor.getValue();
            var defaultCode = getDefaultCode(prevValue);


            if (code===defaultCode){
                editor.setMode(value);
                editor.setValue(getDefaultCode(value));
            }
            else{
                confirm("Are you sure you want to delete this code and switch editor?",{
                    leftButton: {label: "Yes", value: true},
                    rightButton: {label: "No", value: false},
                    callback: function(yes){
                        if (yes){
                            editor.setMode(value);
                            editor.setValue(getDefaultCode(value));
                            gridContainer.innerHTML = "";
                        }
                        else{
                            combobox.setValue(prevValue, true);
                        }
                    }
                });
            }
        };
    };


  //**************************************************************************
  //** createEditor
  //**************************************************************************
    var createEditor = function(parent){

        if (typeof CodeMirror !== 'undefined'){

            var outerDiv = document.createElement("div");
            outerDiv.style.height = "100%";
            outerDiv.style.position = "relative";
            parent.appendChild(outerDiv);

            var innerDiv = document.createElement("div");
            innerDiv.style.width = "100%";
            innerDiv.style.height = "100%";
            innerDiv.style.position = "absolute";
            innerDiv.style.overflow = "auto";
            outerDiv.appendChild(innerDiv);

            var createCodeMirror = function(){

                editor = CodeMirror(innerDiv, {
                    value: "",
                    mode: config.filter.mode,
                    lineNumbers: false,
                    indentUnit: 4
                });

                editor.setValue = function(str){
                    var doc = this.getDoc();
                    doc.setValue(str);
                    doc.clearHistory();

                    var cm = this;
                    setTimeout(function() {
                        cm.refresh();
                    },200);
                };

                editor.getValue = function(){
                    return this.getDoc().getValue();
                };

                editor.setMode = function(mode){
                    if (mode===editor.getOption("mode")) return;

                    config.filter.mode = mode;
                    var val = editor.getValue();
                    editor = null;
                    innerDiv.innerHTML = "";
                    createCodeMirror();
                    editor.setValue(val);
                };
            };

            createCodeMirror();

        }
        else{
            editor = document.createElement('textarea');
            editor.style.height = "100%";
            editor.style.width = "100%";
            editor.style.resize = "none";
            parent.appendChild(editor);
            editor.getValue = function(){
                return this.value;
            };
            editor.setValue = function(str){
                this.value = str;
            };
            editor.setMode = function(){
                //do nothing...
            };
        }

    };


  //**************************************************************************
  //** createGridContainer
  //**************************************************************************
    var createGridContainer = function(parent){

        gridContainer = document.createElement("div");
        gridContainer.className = "grid-container-"+new Date().getTime();
        gridContainer.style.height = "100%";
        parent.appendChild(gridContainer);

    };


  //**************************************************************************
  //** addVerticalResizer
  //**************************************************************************
  /** Inserts a resize handle into the parent. Assumes target is above the
   *  parent.
   */
    var addVerticalResizer = function(parent, target){
        var div = document.createElement("div");
        div.style.position = "relative";

        var resizeHandle = document.createElement("div");
        resizeHandle.style.position = "absolute";
        resizeHandle.style.width = "100%";
        resizeHandle.style.height = "10px";
        resizeHandle.style.top = "-5px";
        resizeHandle.style.cursor = "ns-resize";
        resizeHandle.style.zIndex = 2;
        div.appendChild(resizeHandle);
        parent.appendChild(div);

        javaxt.dhtml.utils.initDrag(resizeHandle, {
            onDragStart: function(x,y){
                var div = this;
                div.yOffset = y;
                div.initialHeight = target.offsetHeight;
            },
            onDrag: function(x,y){
                var div = this;
                var top = (div.yOffset-y);
                var height = div.initialHeight-top;
                target.style.height = height + "px";
            },
            onDragEnd: function(){
            }
        });
    };


  //**************************************************************************
  //** createWaitMask
  //**************************************************************************
    var createWaitMask = function(parent){
        if (javaxt.express){
            waitmask = new javaxt.express.WaitMask(parent);
        }
        else{
            waitmask = {
                show: function(){},
                hide: function(){}
            };
        }
    };


  //**************************************************************************
  //** getDefaultCode
  //**************************************************************************
    var getDefaultCode = function(mode){
        if (mode=="sql"){
            return "select * from ?";
        }
        if (mode=="javascript"){

            return "" +
            "var records = [];\n" +
            "data.forEach((record, i)=>{\n" +
            "    \n" +
            "    //TODO: do something with the record\n" +
            "    \n" +
            "    records.push(record);\n" +
            "});\n" +
            "return records;";

        }
    };


  //**************************************************************************
  //** runScript
  //**************************************************************************
    var runScript = function(callback){
        gridContainer.innerHTML = "";

        var mode = combobox.getValue();
        var code = editor.getValue();
        var input = inputData[0];

        waitmask.show();
        setTimeout(()=>{


          //Run script and get records
            var arr;
            if (mode==="sql"){
                arr = alasql(code, [input.data]);
            }
            else if (mode==="javascript"){

                getRecords = null;
                var fn = "getRecords = function(data){\n" + code + "\n}";
                eval(fn);


                arr = getRecords(input.data);
            }

            waitmask.hide();


          //Convert records into a two dimensional array for the grid and chart editors
            if (arr){
                data = [];
                if (arr.length>0){
                    var keys = Object.keys(arr[0]);
                    data.push(keys);

                    arr.forEach((d)=>{
                        var record = [];
                        keys.forEach((key)=>{
                            record.push(d[key]);
                        });
                        data.push(record);
                    });

                    createGrid(data, true, gridContainer, config);
                }
            }


          //Update filter config
            config.filter.code = code;
            config.filter.hasHeader = input.config.hasHeader;
            config.filter.sheetName = input.config.sheetName;


            if (callback) callback.apply(me, [data, config.filter]);

        }, 300);

    };



  //**************************************************************************
  //** Utils
  //**************************************************************************
    var merge = javaxt.dhtml.utils.merge;
    var setStyle = javaxt.dhtml.utils.setStyle;
    var createTable = javaxt.dhtml.utils.createTable;
    var createButton = bluewave.utils.createButton;
    var createSpacer = bluewave.utils.createSpacer;
    var createGrid = bluewave.utils.createGrid;
    var parseData = bluewave.utils.parseData;


    init();
};